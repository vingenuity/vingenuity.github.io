<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Work Samples on Vingenuity</title>
    <link>https://vingenuity.github.io/work-sample/</link>
    <description>Recent content in Work Samples on Vingenuity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Nov 2014 00:00:00 -0600</lastBuildDate>
    
	<atom:link href="https://vingenuity.github.io/work-sample/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dynamic Text Localization</title>
      <link>https://vingenuity.github.io/work-sample/ssng/dynamic-text-localization/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 -0600</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/ssng/dynamic-text-localization/</guid>
      <description>Motivation UDK has a very well-made localization system that can handle localizing text, images, and even video files. However, in order to localize all of these assets, it performs this localization during the initial engine load. Unfortunately, this means that changing the localization in UDK normally requires a game restart.
For our game, we wanted to work around this limitation and allow our users to change the localization on-the-fly using our menus.</description>
    </item>
    
    <item>
      <title>Multiplayer Menus</title>
      <link>https://vingenuity.github.io/work-sample/ssng/multiplayer-menus/</link>
      <pubDate>Sat, 29 Nov 2014 00:00:00 -0600</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/ssng/multiplayer-menus/</guid>
      <description>Motivation From the moment our team decided to create a local multiplayer game, we knew we would have to work around the limits of the basic Flash input system, which only supports a single controller.
Thankfully, we discovered that Scaleform had an extension called the FocusManager that handled the difficult parts for us. Our final implementation uses this extension extensively for the four-player input.
 Design In general, our multiplayer menus start up by using the stage actions to set up the FocusManager masks for the controllers and the objects on stage.</description>
    </item>
    
    <item>
      <title>Opening Cutscene</title>
      <link>https://vingenuity.github.io/work-sample/ssng/opening-cutscene/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 -0600</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/ssng/opening-cutscene/</guid>
      <description>Motivation For playing cutscenes, UDK requires using the Bink format and its native player. However, as students with no native code access, UDK&amp;rsquo;s Bink player has a major downside: the only play function is an exec command called MOVIETEST.
The MOVIETEST function loads the movie and then stops the engine completely to play it. This means that the cutscenes are unskippable (input has been stopped) and can&amp;rsquo;t have subtitles (the message system is also stopped.</description>
    </item>
    
    <item>
      <title>Dynamic Text Localizer</title>
      <link>https://vingenuity.github.io/work-sample/akhet/dynamic-text-localizer/</link>
      <pubDate>Wed, 30 Apr 2014 00:00:00 -0500</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/akhet/dynamic-text-localizer/</guid>
      <description>While the Text Localizer class was originally made in this game, it was refined in Super Slash n&amp;rsquo; Grab into its final form. Please check the code breakdown for this class by clicking HERE.</description>
    </item>
    
    <item>
      <title>Scarab Gun</title>
      <link>https://vingenuity.github.io/work-sample/akhet/scarab-gun/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 -0500</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/akhet/scarab-gun/</guid>
      <description>Motivation When we came up with the design for this game, we wanted to create futuristic weapons that had interesting Egyptian designs. One idea that we had was a gun that shot deadly scarabs, inspired by the movie The Mummy.
 Design The Scarab Gun needed to fulfill two roles for our game. First, it needed to be our shotgun weapon. Second, it was to fulfill our need for a zoning weapon, so it also needed to place traps.</description>
    </item>
    
    <item>
      <title>Stockpile Game Mode</title>
      <link>https://vingenuity.github.io/work-sample/akhet/stockpile-game-mode/</link>
      <pubDate>Mon, 28 Apr 2014 00:00:00 -0500</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/akhet/stockpile-game-mode/</guid>
      <description>Motivation In our second Team Game Project, teams were required to make some variant of the Capture the Flag gametype. We prototyped a few different modes and ultimately decided that the classic Stockpile game mode would work best for our game.
 Design The stockpile game mode logic is split mainly across three classes: the game class, the flag class and the score zone class. The game class manages the game timer, scoring timer and victory conditions for the game, but knows nothing about how points are scored.</description>
    </item>
    
    <item>
      <title>Level End Menu</title>
      <link>https://vingenuity.github.io/work-sample/cadbury/level-end-menu/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 -0600</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/cadbury/level-end-menu/</guid>
      <description>Motivation At the end of each level, our team wanted to give the player a score in order to reinforce that speed and collection were important. We decided that the best way to implement this idea was to have a separate &amp;ldquo;end level&amp;rdquo; that would present the score.
 Design My focus in the design of this class was flexibility. This class was created midway through the project, and I knew we were going to have to make changes to this menu over time.</description>
    </item>
    
    <item>
      <title>In-Game HUD</title>
      <link>https://vingenuity.github.io/work-sample/cadbury/in-game-hud/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 -0600</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/cadbury/in-game-hud/</guid>
      <description>Motivation One of the less developed features in GuildEd was the UI system. As a result, even though our game needed a minimal UI, I needed to write a custom UI class for our game.
 Design As with the end-of-level menu, my main focus in the writing of this class was flexibility. Each UI Element is able to be set to a specific corner of the screen, given an independent offset, linked to a specific piece of game data, rendered as a number or bar, and given a specific icon.</description>
    </item>
    
    <item>
      <title>Player Physics</title>
      <link>https://vingenuity.github.io/work-sample/cadbury/player-physics/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 -0600</pubDate>
      
      <guid>https://vingenuity.github.io/work-sample/cadbury/player-physics/</guid>
      <description>Motivation From the outset, we wanted our game to be a platformer focused on speed and agility. Thus, our player character has the ability to run, jump, wall jump, and wall slide. My primary focus during development was on making all of the physics for these actions &amp;ldquo;feel right.&amp;rdquo;
 Design GuildEd had a solid integration setup for its physics, but its collision system had some small issues.</description>
    </item>
    
  </channel>
</rss>